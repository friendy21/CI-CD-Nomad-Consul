name: CI/CD for User Service

on:
  push:
    branches: [ "main" ]
    paths:
      - "user/**"
      - ".github/workflows/user-ci.yml"
      - "nomad/user.hcl"
      - "docker/Dockerfile.stage"
  pull_request:
    branches: [ "main" ]
    paths:
      - "user/**"
      - ".github/workflows/user-ci.yml"
      - "nomad/user.hcl"

env:
  IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
  DOCKER_IMAGE: friendy21/user-service
  SERVICE_NAME: user-service
  SERVICE_PORT: 5001

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./user
        file: ./docker/Dockerfile.stage
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VERSION=${{ env.IMAGE_TAG }}

    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:latest
        format: 'table'
        exit-code: '0'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Nomad
      run: |
        curl -fsSL -o nomad.zip https://releases.hashicorp.com/nomad/1.8.3/nomad_1.8.3_linux_amd64.zip
        unzip nomad.zip
        sudo mv nomad /usr/local/bin/
        rm nomad.zip
        nomad version

    - name: Deploy to Nomad
      env:
        NOMAD_ADDR: ${{ secrets.NOMAD_ADDR }}
        NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN }}
      run: |
        sed -i "s|IMAGE_TAG_PLACEHOLDER|${{ env.IMAGE_TAG }}|g" nomad/user.hcl
        sed -i "s|DOCKER_IMAGE_PLACEHOLDER|${{ env.DOCKER_IMAGE }}|g" nomad/user.hcl
        
        # Validate job
        nomad job validate nomad/user.hcl
        
        # Deploy job
        nomad job run nomad/user.hcl
        
        # Wait for deployment
        MAX_ATTEMPTS=30
        ATTEMPT=0
        
        echo "⏳ Waiting for deployment to complete..."
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          if nomad job status user-service 2>/dev/null | grep -q "Status.*running"; then
            echo "✅ User service is running!"
            break
          fi
          sleep 10
          ATTEMPT=$((ATTEMPT + 1))
        done
        
        if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
          echo "❌ Deployment timed out"
          nomad job status user-service
          exit 1
        fi
        
        echo "✅ User service deployed successfully!"
        nomad job status user-service
