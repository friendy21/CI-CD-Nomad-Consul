name: CI/CD for Teams Service

on:
  push:
    branches: [ "main" ]
    paths:
      - "teams/**"
      - ".github/workflows/teams-ci.yml"
      - "nomad/teams.hcl"
      - "docker/Dockerfile.stage"
  pull_request:
    branches: [ "main" ]
    paths:
      - "teams/**"
      - ".github/workflows/teams-ci.yml"
      - "nomad/teams.hcl"

env:
  IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
  DOCKER_IMAGE: friendy21/teams-service
  SERVICE_NAME: teams-service
  SERVICE_PORT: 5005

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./teams
        file: ./docker/Dockerfile.stage
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VERSION=${{ env.IMAGE_TAG }}

    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Nomad
      uses: hashicorp/setup-nomad@main
      with:
        nomad_version: 'latest'

    - name: Verify Nomad installation
      run: |
        echo "‚úÖ Nomad version:"
        nomad version
        echo "‚úÖ Nomad path:"
        which nomad

    - name: Validate and Deploy to Nomad
      env:
        NOMAD_ADDR: ${{ secrets.NOMAD_ADDR }}
        NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN }}
      run: |
        set -e
        
        echo "üîç Starting deployment for ${{ env.SERVICE_NAME }}..."
        
        # Environment validation
        if [ -z "$NOMAD_ADDR" ] || [ -z "$NOMAD_TOKEN" ]; then
          echo "‚ùå NOMAD_ADDR or NOMAD_TOKEN missing"
          exit 1
        fi
        
        echo "‚úÖ Environment ready"
        echo "üéØ Nomad: $NOMAD_ADDR"
        echo "üîß Image: ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}"
        
        # Locate HCL file
        HCL_FILE="nomad/teams.hcl"
        if [ ! -f "$HCL_FILE" ]; then
          echo "üîç Searching for teams.hcl..."
          HCL_FILE=$(find . -name "teams.hcl" -type f | head -1)
          if [ -z "$HCL_FILE" ]; then
            echo "‚ùå teams.hcl not found"
            echo "üìÅ Available HCL files:"
            find . -name "*.hcl" -type f || echo "None found"
            exit 1
          fi
        fi
        echo "‚úÖ HCL file: $HCL_FILE"
        
        # Create backup and process
        BACKUP="${HCL_FILE}.backup.$(date +%s)"
        cp "$HCL_FILE" "$BACKUP"
        echo "üíæ Backup: $BACKUP"
        
        # Replace placeholders
        echo "üîÑ Processing placeholders..."
        sed -i "s|IMAGE_TAG_PLACEHOLDER|${{ env.IMAGE_TAG }}|g" "$HCL_FILE"
        sed -i "s|DOCKER_IMAGE_PLACEHOLDER|${{ env.DOCKER_IMAGE }}|g" "$HCL_FILE"
        
        # Validation of replacement
        PLACEHOLDER_COUNT=$(grep -c "PLACEHOLDER" "$HCL_FILE" 2>/dev/null || echo "0")
        if [ "$PLACEHOLDER_COUNT" -gt 0 ]; then
          echo "‚ùå $PLACEHOLDER_COUNT unprocessed placeholders:"
          grep "PLACEHOLDER" "$HCL_FILE"
          cp "$BACKUP" "$HCL_FILE"
          exit 1
        fi
        echo "‚úÖ Placeholders processed successfully"
        
        # Test connectivity
        echo "üîó Testing connection to Nomad..."
        RETRY_CONN=0
        while [ $RETRY_CONN -lt 5 ]; do
          if nomad node status >/dev/null 2>&1; then
            echo "‚úÖ Nomad connection established"
            break
          fi
          
          RETRY_CONN=$((RETRY_CONN + 1))
          if [ $RETRY_CONN -lt 5 ]; then
            echo "‚è≥ Connection attempt $RETRY_CONN/5, retrying..."
            sleep 8
          else
            echo "‚ùå Failed to connect after 5 attempts"
            exit 1
          fi
        done
        
        # Job validation
        echo "üîç Validating Nomad job..."
        if ! nomad job validate "$HCL_FILE"; then
          echo "‚ùå Job validation failed"
          echo "üìÑ Job content:"
          cat "$HCL_FILE"
          exit 1
        fi
        echo "‚úÖ Job validation passed"
        
        # Planning phase
        echo "üìã Creating deployment plan..."
        if ! nomad job plan "$HCL_FILE"; then
          echo "‚ö†Ô∏è Planning encountered issues, proceeding with caution"
        else
          echo "‚úÖ Planning successful"
        fi
        
        # Execute deployment
        echo "üöÄ Executing deployment..."
        if ! nomad job run "$HCL_FILE"; then
          echo "‚ùå Job execution failed"
          nomad job status ${{ env.SERVICE_NAME }} 2>/dev/null || echo "No job status available"
          exit 1
        fi
        echo "‚úÖ Job submitted to cluster"
        
        # Monitoring deployment
        echo "‚è≥ Monitoring deployment status..."
        MAX_MONITOR_TIME=80
        MONITOR_TIME=0
        STABLE_DURATION=0
        LAST_STATUS=""
        
        while [ $MONITOR_TIME -lt $MAX_MONITOR_TIME ]; do
          CURRENT_STATUS=$(nomad job status ${{ env.SERVICE_NAME }} 2>/dev/null | grep "^Status" | awk '{print $3}' || echo "pending")
          
          # Log status changes
          if [ "$CURRENT_STATUS" != "$LAST_STATUS" ]; then
            echo "üìä Status change: $LAST_STATUS ‚Üí $CURRENT_STATUS"
            LAST_STATUS="$CURRENT_STATUS"
            STABLE_DURATION=0
          fi
          
          case "$CURRENT_STATUS" in
            "running")
              STABLE_DURATION=$((STABLE_DURATION + 1))
              
              if [ $STABLE_DURATION -ge 4 ]; then
                echo "‚úÖ ${{ env.SERVICE_NAME }} successfully deployed and stable!"
                
                # Display deployment info
                echo "üìä Final deployment status:"
                nomad job status ${{ env.SERVICE_NAME }} | head -12
                
                # Attempt service health check
                echo "üè• Performing health verification..."
                HEALTH_SUCCESS=false
                
                for health_try in {1..8}; do
                  echo "üîÑ Health check $health_try/8..."
                  
                  if timeout 12 curl -f -s "http://localhost:${{ env.SERVICE_PORT }}/health" >/dev/null 2>&1; then
                    echo "‚úÖ Health check successful"
                    
                    # Get health details
                    HEALTH_DETAILS=$(timeout 8 curl -s "http://localhost:${{ env.SERVICE_PORT }}/health" 2>/dev/null | jq . 2>/dev/null || echo "Service responsive")
                    echo "üìã Health details: $HEALTH_DETAILS"
                    
                    HEALTH_SUCCESS=true
                    break
                  fi
                  
                  if [ $health_try -lt 8 ]; then
                    sleep 12
                  fi
                done
                
                if [ "$HEALTH_SUCCESS" = false ]; then
                  echo "‚ö†Ô∏è Health endpoint not accessible"
                  echo "üîç This might be expected if service is still initializing"
                fi
                
                echo "üéâ Deployment completed successfully!"
                exit 0
              else
                echo "üìä Running stable for ${STABLE_DURATION}s (need 4s)"
              fi
              ;;
            "dead"|"failed")
              echo "‚ùå Deployment failed with status: $CURRENT_STATUS"
              
              # Detailed failure information
              echo "üìä Job status details:"
              nomad job status ${{ env.SERVICE_NAME }} | head -20
              echo ""
              echo "üìã Allocation information:"
              nomad job allocs ${{ env.SERVICE_NAME }} | head -8
              echo ""
              echo "üìù Recent logs:"
              ALLOC_ID=$(nomad job allocs ${{ env.SERVICE_NAME }} -json 2>/dev/null | jq -r '.[0].ID' 2>/dev/null || echo "")
              if [ -n "$ALLOC_ID" ] && [ "$ALLOC_ID" != "null" ]; then
                nomad alloc logs -n 30 "$ALLOC_ID" 2>/dev/null || echo "Logs not available"
              fi
              
              exit 1
              ;;
            "pending")
              if [ $((MONITOR_TIME % 15)) -eq 0 ] && [ $MONITOR_TIME -gt 0 ]; then
                echo "üìä Still pending after ${MONITOR_TIME}s..."
                nomad job status ${{ env.SERVICE_NAME }} | head -8
              fi
              ;;
          esac
          
          sleep 5
          MONITOR_TIME=$((MONITOR_TIME + 1))
        done
        
        echo "‚ùå Monitoring timeout after ${MAX_MONITOR_TIME}s"
        echo "üìä Final status:"
        nomad job status ${{ env.SERVICE_NAME }} || true
        exit 1
