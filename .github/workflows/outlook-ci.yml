name: CI/CD for Outlook Service

on:
  push:
    branches: [ "main" ]
    paths:
      - "outlook/**"
      - ".github/workflows/outlook-ci.yml"
      - "nomad/outlook.hcl"
      - "docker/Dockerfile.stage"
  pull_request:
    branches: [ "main" ]
    paths:
      - "outlook/**"
      - ".github/workflows/outlook-ci.yml"
      - "nomad/outlook.hcl"

env:
  IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
  DOCKER_IMAGE: friendy21/outlook-service
  SERVICE_NAME: outlook-service
  SERVICE_PORT: 5004

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./outlook
        file: ./docker/Dockerfile.stage
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VERSION=${{ env.IMAGE_TAG }}

    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Nomad
      uses: hashicorp/setup-nomad@main
      with:
        nomad_version: 'latest'

    - name: Verify Nomad installation
      run: |
        echo "‚úÖ Nomad version:"
        nomad version
        echo "‚úÖ Nomad path:"
        which nomad

    - name: Validate and Deploy to Nomad
      env:
        NOMAD_ADDR: ${{ secrets.NOMAD_ADDR }}
        NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN }}
      run: |
        set -e
        
        echo "üîç Validating environment for ${{ env.SERVICE_NAME }}..."
        
        # Validate environment variables
        if [ -z "$NOMAD_ADDR" ] || [ -z "$NOMAD_TOKEN" ]; then
          echo "‚ùå Required environment variables not set"
          exit 1
        fi
        
        echo "‚úÖ Environment validated"
        echo "üéØ Target: $NOMAD_ADDR"
        echo "üîß Image: ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}"
        
        # Find and process HCL file
        HCL_FILE="nomad/outlook.hcl"
        if [ ! -f "$HCL_FILE" ]; then
          HCL_FILE=$(find . -name "outlook.hcl" -type f | head -1)
          if [ -z "$HCL_FILE" ]; then
            echo "‚ùå outlook.hcl not found anywhere"
            find . -name "*.hcl" -type f || echo "No HCL files found"
            exit 1
          fi
        fi
        echo "‚úÖ Using HCL: $HCL_FILE"
        
        # Backup and replace placeholders
        cp "$HCL_FILE" "${HCL_FILE}.backup"
        echo "üíæ Backup created"
        
        echo "üîÑ Processing placeholders..."
        sed -i "s|IMAGE_TAG_PLACEHOLDER|${{ env.IMAGE_TAG }}|g" "$HCL_FILE"
        sed -i "s|DOCKER_IMAGE_PLACEHOLDER|${{ env.DOCKER_IMAGE }}|g" "$HCL_FILE"
        
        # Verify processing
        if grep -q "PLACEHOLDER" "$HCL_FILE"; then
          echo "‚ùå Unprocessed placeholders found:"
          grep "PLACEHOLDER" "$HCL_FILE"
          exit 1
        fi
        echo "‚úÖ Placeholders processed"
        
        # Test connection and validate
        echo "üîó Testing Nomad connection..."
        MAX_CONN_ATTEMPTS=3
        CONN_ATTEMPT=0
        
        while [ $CONN_ATTEMPT -lt $MAX_CONN_ATTEMPTS ]; do
          if nomad node status >/dev/null 2>&1; then
            echo "‚úÖ Connection verified"
            break
          fi
          
          CONN_ATTEMPT=$((CONN_ATTEMPT + 1))
          if [ $CONN_ATTEMPT -lt $MAX_CONN_ATTEMPTS ]; then
            echo "‚è≥ Retry $CONN_ATTEMPT/$MAX_CONN_ATTEMPTS..."
            sleep 5
          else
            echo "‚ùå Connection failed after $MAX_CONN_ATTEMPTS attempts"
            exit 1
          fi
        done
        
        echo "üîç Validating job configuration..."
        if ! nomad job validate "$HCL_FILE"; then
          echo "‚ùå Validation failed"
          echo "üìÑ File content:"
          cat "$HCL_FILE"
          exit 1
        fi
        echo "‚úÖ Job validated"
        
        # Deploy with planning
        echo "üìã Planning deployment..."
        nomad job plan "$HCL_FILE" || echo "‚ö†Ô∏è Planning completed with warnings"
        
        echo "üöÄ Deploying ${{ env.SERVICE_NAME }}..."
        if ! nomad job run "$HCL_FILE"; then
          echo "‚ùå Deployment failed"
          nomad job status ${{ env.SERVICE_NAME }} 2>/dev/null || true
          exit 1
        fi
        echo "‚úÖ Deployment initiated"
        
        # Enhanced monitoring
        echo "‚è≥ Monitoring deployment progress..."
        MAX_WAIT=60
        WAIT=0
        CONSECUTIVE_RUNNING=0
        
        while [ $WAIT -lt $MAX_WAIT ]; do
          STATUS=$(nomad job status ${{ env.SERVICE_NAME }} 2>/dev/null | grep "^Status" | awk '{print $3}' || echo "checking")
          
          case "$STATUS" in
            "running")
              CONSECUTIVE_RUNNING=$((CONSECUTIVE_RUNNING + 1))
              echo "üìä Status: running (stable: $CONSECUTIVE_RUNNING/3)"
              
              if [ $CONSECUTIVE_RUNNING -ge 3 ]; then
                echo "‚úÖ ${{ env.SERVICE_NAME }} deployed successfully!"
                
                # Show summary
                nomad job status ${{ env.SERVICE_NAME }} | head -12
                
                # Optional health verification
                echo "üè• Checking service health..."
                for i in {1..5}; do
                  if timeout 10 curl -f -s http://localhost:${{ env.SERVICE_PORT }}/health >/dev/null 2>&1; then
                    echo "‚úÖ Health check passed"
                    break
                  elif [ $i -eq 5 ]; then
                    echo "‚ö†Ô∏è Health check not accessible (this may be normal)"
                  else
                    echo "üîÑ Health attempt $i/5..."
                    sleep 8
                  fi
                done
                
                exit 0
              fi
              ;;
            "dead"|"failed")
              echo "‚ùå Deployment failed with status: $STATUS"
              nomad job status ${{ env.SERVICE_NAME }} | head -15
              echo ""
              echo "üìã Allocation details:"
              nomad job allocs ${{ env.SERVICE_NAME }} | head -5
              exit 1
              ;;
            *)
              CONSECUTIVE_RUNNING=0
              if [ $((WAIT % 12)) -eq 0 ]; then
                echo "üìä Status: $STATUS (${WAIT}s/${MAX_WAIT}s)"
              fi
              ;;
          esac
          
          sleep 5
          WAIT=$((WAIT + 1))
        done
        
        echo "‚ùå Deployment monitoring timeout"
        nomad job status ${{ env.SERVICE_NAME }} || true
        exit 1
