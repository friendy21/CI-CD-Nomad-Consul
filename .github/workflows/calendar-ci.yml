name: CI/CD for Calendar Service

on:
  push:
    branches: [ "main" ]
    paths:
      - "calendar/**"
      - ".github/workflows/calendar-ci.yml"
      - "nomad/calendar.hcl"
      - "docker/Dockerfile.stage"
  pull_request:
    branches: [ "main" ]
    paths:
      - "calendar/**"
      - ".github/workflows/calendar-ci.yml"
      - "nomad/calendar.hcl"

env:
  IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
  DOCKER_IMAGE: friendy21/calendar-service
  SERVICE_NAME: calendar-service
  SERVICE_PORT: 5002

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./calendar
        file: ./docker/Dockerfile.stage
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VERSION=${{ env.IMAGE_TAG }}

    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Nomad
      uses: hashicorp/setup-nomad@main
      with:
        nomad_version: 'latest'

    - name: Verify Nomad installation
      run: |
        echo "✅ Nomad version:"
        nomad version
        echo "✅ Nomad path:"
        which nomad

    - name: Debug repository structure
      run: |
        echo "🔍 Debugging repository structure..."
        echo "📁 Current directory: $(pwd)"
        echo "📁 Directory contents:"
        ls -la
        echo ""
        echo "🔍 Looking for Nomad HCL files:"
        find . -name "*.hcl" -type f || echo "No .hcl files found"
        echo ""
        echo "📁 Checking nomad directory:"
        if [ -d nomad ]; then
          echo "✅ nomad directory exists"
          ls -la nomad/
        else
          echo "❌ nomad directory not found"
        fi

    - name: Validate and Deploy to Nomad
      env:
        NOMAD_ADDR: ${{ secrets.NOMAD_ADDR }}
        NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN }}
      run: |
        set -e
        
        echo "🔍 Validating environment..."
        
        # Check required environment variables
        if [ -z "$NOMAD_ADDR" ]; then
          echo "❌ NOMAD_ADDR is not set"
          exit 1
        fi
        
        if [ -z "$NOMAD_TOKEN" ]; then
          echo "❌ NOMAD_TOKEN is not set"
          exit 1
        fi
        
        echo "✅ Environment variables validated"
        echo "🎯 Nomad Address: $NOMAD_ADDR"
        echo "🔧 Image: ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}"
        
        # Find the HCL file
        HCL_FILE="nomad/calendar.hcl"
        
        if [ ! -f "$HCL_FILE" ]; then
          echo "❌ HCL file not found at expected location: $HCL_FILE"
          echo "🔍 Searching for calendar.hcl in entire repository..."
          
          FOUND_FILE=$(find . -name "calendar.hcl" -type f | head -1)
          if [ -n "$FOUND_FILE" ]; then
            echo "✅ Found HCL file at: $FOUND_FILE"
            HCL_FILE="$FOUND_FILE"
          else
            echo "❌ calendar.hcl not found anywhere in repository"
            echo "📁 Available files:"
            find . -name "*.hcl" -type f || echo "No .hcl files found"
            exit 1
          fi
        else
          echo "✅ Found HCL file at expected location: $HCL_FILE"
        fi
        
        # Create backup with timestamp
        BACKUP_FILE="${HCL_FILE}.backup.$(date +%s)"
        cp "$HCL_FILE" "$BACKUP_FILE"
        echo "💾 Created backup: $BACKUP_FILE"
        
        # Show original content for debugging
        echo "📄 Original HCL file content (first 20 lines):"
        echo "----------------------------------------"
        head -20 "$HCL_FILE"
        echo "----------------------------------------"
        
        # Replace placeholders with better error handling
        echo "🔄 Replacing placeholders..."
        if ! sed -i "s|IMAGE_TAG_PLACEHOLDER|${{ env.IMAGE_TAG }}|g" "$HCL_FILE"; then
          echo "❌ Failed to replace IMAGE_TAG_PLACEHOLDER"
          exit 1
        fi
        
        if ! sed -i "s|DOCKER_IMAGE_PLACEHOLDER|${{ env.DOCKER_IMAGE }}|g" "$HCL_FILE"; then
          echo "❌ Failed to replace DOCKER_IMAGE_PLACEHOLDER"
          exit 1
        fi
        
        # Verify replacements more thoroughly
        echo "🔍 Checking for remaining placeholders..."
        REMAINING_PLACEHOLDERS=$(grep -c "PLACEHOLDER" "$HCL_FILE" || echo "0")
        if [ "$REMAINING_PLACEHOLDERS" -gt 0 ]; then
          echo "❌ Found $REMAINING_PLACEHOLDERS remaining placeholders:"
          grep "PLACEHOLDER" "$HCL_FILE" || true
          echo ""
          echo "📄 Current file content:"
          echo "----------------------------------------"
          cat "$HCL_FILE"
          echo "----------------------------------------"
          echo "🔄 Restoring from backup..."
          cp "$BACKUP_FILE" "$HCL_FILE"
          exit 1
        fi
        
        echo "✅ Placeholders replaced successfully"
        
        # Show final content for verification
        echo "📄 Final HCL file content (image line):"
        echo "----------------------------------------"
        grep -n "image.*=" "$HCL_FILE" || echo "No image line found"
        echo "----------------------------------------"
        
        # Test Nomad connectivity with retry logic
        echo "🔗 Testing Nomad connectivity..."
        MAX_CONN_ATTEMPTS=5
        CONN_ATTEMPT=0
        
        while [ $CONN_ATTEMPT -lt $MAX_CONN_ATTEMPTS ]; do
          if nomad node status >/dev/null 2>&1; then
            echo "✅ Nomad connectivity verified"
            break
          fi
          
          CONN_ATTEMPT=$((CONN_ATTEMPT + 1))
          if [ $CONN_ATTEMPT -lt $MAX_CONN_ATTEMPTS ]; then
            echo "⏳ Connection attempt $CONN_ATTEMPT/$MAX_CONN_ATTEMPTS failed, retrying in 10s..."
            sleep 10
          else
            echo "❌ Cannot connect to Nomad at $NOMAD_ADDR after $MAX_CONN_ATTEMPTS attempts"
            echo "🔍 Nomad server info:"
            curl -s "$NOMAD_ADDR/v1/status/leader" || echo "Failed to get leader info"
            exit 1
          fi
        done
        
        # Validate job
        echo "🔍 Validating Nomad job..."
        if ! nomad job validate "$HCL_FILE"; then
          echo "❌ Job validation failed"
          echo "📄 Job file contents:"
          cat "$HCL_FILE"
          exit 1
        fi
        echo "✅ Job validation passed"
        
        # Plan the job (dry run)
        echo "📋 Planning job deployment..."
        if ! nomad job plan "$HCL_FILE"; then
          echo "⚠️ Job planning failed, but continuing with deployment..."
        else
          echo "✅ Job planning completed"
        fi
        
        # Run the job
        echo "🚀 Deploying calendar-service..."
        if ! nomad job run "$HCL_FILE"; then
          echo "❌ Job submission failed"
          nomad job status calendar-service || true
          exit 1
        fi
        echo "✅ Job submitted successfully"
        
        # Enhanced deployment monitoring
        echo "⏳ Waiting for deployment to complete..."
        MAX_ATTEMPTS=120  # Increased timeout to 20 minutes
        ATTEMPT=0
        LAST_STATUS=""
        STABLE_COUNT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          # Get job status with better error handling
          STATUS=$(nomad job status calendar-service 2>/dev/null | grep "^Status" | awk '{print $3}' 2>/dev/null || echo "unknown")
          
          # Only log status changes to reduce noise
          if [ "$STATUS" != "$LAST_STATUS" ]; then
            echo "📊 Status update ($((ATTEMPT + 1))/$MAX_ATTEMPTS): $STATUS"
            LAST_STATUS="$STATUS"
            STABLE_COUNT=0
          fi
          
          case "$STATUS" in
            "running")
              STABLE_COUNT=$((STABLE_COUNT + 1))
              
              # Wait for stable running state
              if [ $STABLE_COUNT -ge 3 ]; then
                echo "✅ Calendar service is running stably!"
                
                # Get deployment summary
                echo "📊 Deployment summary:"
                nomad job status calendar-service | head -20
                
                # Enhanced health check with proper networking
                echo "🏥 Testing service health..."
                
                # Get allocation info first
                ALLOC_ID=$(nomad job allocs calendar-service -json 2>/dev/null | jq -r '.[0].ID' 2>/dev/null || echo "")
                
                if [ -n "$ALLOC_ID" ] && [ "$ALLOC_ID" != "null" ]; then
                  # Get the actual IP address of the allocation
                  ALLOC_IP=$(nomad alloc status "$ALLOC_ID" 2>/dev/null | grep -E "Host Network.*:" | awk -F':' '{print $2}' | tr -d ' ' || echo "localhost")
                  
                  for health_attempt in {1..10}; do
                    echo "🔄 Health check attempt $health_attempt/10..."
                    
                    # Try multiple health check methods
                    for health_url in "http://${ALLOC_IP}:${{ env.SERVICE_PORT }}/health" "http://localhost:${{ env.SERVICE_PORT }}/health"; do
                      if timeout 10 curl -f -s "$health_url" >/dev/null 2>&1; then
                        echo "✅ Health check passed via $health_url"
                        
                        # Get detailed health info
                        HEALTH_INFO=$(timeout 5 curl -s "$health_url" 2>/dev/null | jq . 2>/dev/null || echo "Health endpoint responded")
                        echo "📊 Service health: $HEALTH_INFO"
                        
                        exit 0
                      fi
                    done
                    
                    if [ $health_attempt -lt 10 ]; then
                      sleep 15
                    fi
                  done
                  
                  echo "⚠️ Health check failed, but service is running"
                  echo "🔍 This might be normal if the service is still initializing"
                else
                  echo "⚠️ Could not get allocation ID for health check"
                fi
                
                exit 0
              fi
              ;;
            "dead"|"failed")
              echo "❌ Deployment failed with status: $STATUS"
              echo "📊 Job status details:"
              nomad job status calendar-service || true
              echo ""
              echo "📋 Recent allocations:"
              nomad job allocs calendar-service || true
              echo ""
              echo "📝 Recent logs:"
              FAILED_ALLOC_ID=$(nomad job allocs calendar-service -json 2>/dev/null | jq -r '.[0].ID' 2>/dev/null || echo "")
              if [ -n "$FAILED_ALLOC_ID" ] && [ "$FAILED_ALLOC_ID" != "null" ]; then
                nomad alloc logs -n 50 "$FAILED_ALLOC_ID" 2>/dev/null || echo "No logs available"
              fi
              exit 1
              ;;
            "pending")
              # Show detailed info every 20 attempts to reduce noise
              if [ $((ATTEMPT % 20)) -eq 0 ] && [ $ATTEMPT -gt 0 ]; then
                echo "📊 Still pending after $((ATTEMPT * 10)) seconds..."
                nomad job status calendar-service | head -15 || true
              fi
              ;;
          esac
          
          sleep 10
          ATTEMPT=$((ATTEMPT + 1))
        done
        
        # Timeout reached
        echo "❌ Deployment timed out after $((MAX_ATTEMPTS * 10)) seconds"
        echo "📊 Final job status:"
        nomad job status calendar-service || true
        echo ""
        echo "📋 Allocations:"
        nomad job allocs calendar-service || true
        exit 1
