name: CI/CD for OneDrive Service

on:
  push:
    branches: [ "main" ]
    paths:
      - "onedrive/**"
      - ".github/workflows/onedrive-ci.yml"
      - "nomad/onedrive.hcl"
      - "docker/Dockerfile.stage"
  pull_request:
    branches: [ "main" ]
    paths:
      - "onedrive/**"
      - ".github/workflows/onedrive-ci.yml"
      - "nomad/onedrive.hcl"

env:
  IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}
  DOCKER_IMAGE: friendy21/onedrive-service
  SERVICE_NAME: onedrive-service
  SERVICE_PORT: 5003

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./onedrive
        file: ./docker/Dockerfile.stage
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VERSION=${{ env.IMAGE_TAG }}

    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Nomad
      uses: hashicorp/setup-nomad@main
      with:
        nomad_version: 'latest'

    - name: Verify Nomad installation
      run: |
        echo "‚úÖ Nomad version:"
        nomad version
        echo "‚úÖ Nomad path:"
        which nomad

    - name: Validate and Deploy to Nomad
      env:
        NOMAD_ADDR: ${{ secrets.NOMAD_ADDR }}
        NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN }}
      run: |
        set -e
        
        echo "üîç Validating environment for ${{ env.SERVICE_NAME }}..."
        
        # Check required environment variables
        if [ -z "$NOMAD_ADDR" ] || [ -z "$NOMAD_TOKEN" ]; then
          echo "‚ùå NOMAD_ADDR or NOMAD_TOKEN is not set"
          exit 1
        fi
        
        echo "‚úÖ Environment validated"
        echo "üéØ Nomad Address: $NOMAD_ADDR"
        echo "üîß Image: ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}"
        
        # Find HCL file
        HCL_FILE="nomad/onedrive.hcl"
        if [ ! -f "$HCL_FILE" ]; then
          HCL_FILE=$(find . -name "onedrive.hcl" -type f | head -1)
          if [ -z "$HCL_FILE" ]; then
            echo "‚ùå onedrive.hcl not found"
            exit 1
          fi
        fi
        echo "‚úÖ Using HCL file: $HCL_FILE"
        
        # Create backup and process file
        BACKUP_FILE="${HCL_FILE}.backup.$(date +%s)"
        cp "$HCL_FILE" "$BACKUP_FILE"
        echo "üíæ Created backup: $BACKUP_FILE"
        
        # Replace placeholders
        echo "üîÑ Replacing placeholders..."
        sed -i "s|IMAGE_TAG_PLACEHOLDER|${{ env.IMAGE_TAG }}|g" "$HCL_FILE"
        sed -i "s|DOCKER_IMAGE_PLACEHOLDER|${{ env.DOCKER_IMAGE }}|g" "$HCL_FILE"
        
        # Verify no placeholders remain
        if grep -q "PLACEHOLDER" "$HCL_FILE"; then
          echo "‚ùå Placeholder replacement failed"
          grep "PLACEHOLDER" "$HCL_FILE"
          cp "$BACKUP_FILE" "$HCL_FILE"
          exit 1
        fi
        echo "‚úÖ Placeholders replaced successfully"
        
        # Test connectivity and validate
        echo "üîó Testing Nomad connectivity..."
        if ! nomad node status >/dev/null 2>&1; then
          echo "‚ùå Cannot connect to Nomad"
          exit 1
        fi
        echo "‚úÖ Nomad connection verified"
        
        echo "üîç Validating job..."
        if ! nomad job validate "$HCL_FILE"; then
          echo "‚ùå Job validation failed"
          exit 1
        fi
        echo "‚úÖ Job validation passed"
        
        # Deploy
        echo "üöÄ Deploying ${{ env.SERVICE_NAME }}..."
        if ! nomad job run "$HCL_FILE"; then
          echo "‚ùå Job deployment failed"
          exit 1
        fi
        echo "‚úÖ Job deployed successfully"
        
        # Monitor deployment
        echo "‚è≥ Monitoring deployment..."
        MAX_ATTEMPTS=60
        ATTEMPT=0
        STABLE_COUNT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          STATUS=$(nomad job status ${{ env.SERVICE_NAME }} 2>/dev/null | grep "^Status" | awk '{print $3}' || echo "unknown")
          
          case "$STATUS" in
            "running")
              STABLE_COUNT=$((STABLE_COUNT + 1))
              if [ $STABLE_COUNT -ge 3 ]; then
                echo "‚úÖ ${{ env.SERVICE_NAME }} is running!"
                nomad job status ${{ env.SERVICE_NAME }} | head -10
                exit 0
              fi
              ;;
            "dead"|"failed")
              echo "‚ùå Deployment failed: $STATUS"
              nomad job status ${{ env.SERVICE_NAME }} || true
              exit 1
              ;;
          esac
          
          if [ $((ATTEMPT % 10)) -eq 0 ]; then
            echo "üìä Status ($((ATTEMPT + 1))/$MAX_ATTEMPTS): $STATUS"
          fi
          
          sleep 10
          ATTEMPT=$((ATTEMPT + 1))
        done
        
        echo "‚ùå Deployment timeout"
        exit 1
