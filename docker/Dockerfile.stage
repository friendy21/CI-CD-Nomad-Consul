# Enhanced Multi-stage build for optimized and secure production image
FROM python:3.11-slim AS builder

# Build arguments
ARG BUILD_DATE
ARG VERSION
ARG SERVICE_NAME

# Metadata labels
LABEL maintainer="DevOps Team <devops@company.com>"
LABEL build-date="${BUILD_DATE}"
LABEL version="${VERSION}"
LABEL description="Microservice API built with Flask"

# Set working directory
WORKDIR /app

# Install build dependencies and security tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    curl \
    wget \
    gnupg \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for build process
RUN groupadd -r appgroup && useradd -r -g appgroup -u 1001 builduser

# Copy requirements first for better layer caching
COPY requirements.txt ./
RUN pip install --no-cache-dir --upgrade pip setuptools wheel \
    && pip install --no-cache-dir --user -r requirements.txt

# Verify installed packages for security
RUN pip list --format=json > /app/installed-packages.json

# Production stage with minimal dependencies
FROM python:3.11-slim AS production

# Build arguments (repeated for this stage)
ARG BUILD_DATE
ARG VERSION
ARG SERVICE_NAME

# Metadata labels for production image
LABEL maintainer="DevOps Team <devops@company.com>"
LABEL build-date="${BUILD_DATE}"
LABEL version="${VERSION}"
LABEL stage="production"
LABEL security-scan="enabled"

# Install only runtime dependencies and security tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    dumb-init \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Create non-root user with specific UID/GID for consistency
RUN groupadd -r appgroup -g 1001 \
    && useradd -r -g appgroup -u 1001 -m -d /home/appuser -s /bin/bash appuser \
    && mkdir -p /app /app/logs /tmp/app-cache \
    && chown -R appuser:appgroup /app /tmp/app-cache

# Copy Python packages from builder stage
COPY --from=builder --chown=appuser:appgroup /root/.local /home/appuser/.local

# Copy installed packages list for security scanning
COPY --from=builder /app/installed-packages.json /app/

# Set working directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=appuser:appgroup . .

# Ensure all files have correct permissions
RUN chmod -R 755 /app \
    && chmod -R 750 /app/logs \
    && chmod 644 /app/*.py \
    && find /app -name "*.py" -exec chmod 644 {} \;

# Switch to non-root user
USER appuser

# Set up environment
ENV PATH=/home/appuser/.local/bin:$PATH \
    PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    FLASK_ENV=production \
    WORKERS=2 \
    THREADS=4

# Create app-specific environment file
RUN echo "SERVICE_VERSION=${VERSION}" > /app/.env \
    && echo "BUILD_DATE=${BUILD_DATE}" >> /app/.env \
    && echo "SERVICE_NAME=${SERVICE_NAME}" >> /app/.env

# Enhanced health check with better error handling
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${SERVICE_PORT:-5000}/health \
        --max-time 5 \
        --connect-timeout 3 \
        --retry 2 \
        --retry-delay 1 \
        || exit 1

# Security: Run as non-root and drop capabilities
USER appuser:appgroup

# Expose port (will be overridden by service-specific port)
EXPOSE 5000

# Volume for logs (optional, can be overridden)
VOLUME ["/app/logs"]

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Default command with proper signal handling
CMD ["python", "app.py"]

# Alternative production command using Gunicorn (commented out, can be uncommented if needed)
# CMD ["gunicorn", \
#      "--bind", "0.0.0.0:${SERVICE_PORT:-5000}", \
#      "--workers", "${WORKERS:-2}", \
#      "--threads", "${THREADS:-4}", \
#      "--worker-class", "sync", \
#      "--timeout", "30", \
#      "--keep-alive", "5", \
#      "--max-requests", "1000", \
#      "--max-requests-jitter", "100", \
#      "--log-level", "info", \
#      "--access-logfile", "-", \
#      "--error-logfile", "-", \
#      "--capture-output", \
#      "app:app"]
